// 
// File: Reconstructor.h
//
// Author: Hunter Sullivan
//
// Description: Structure to perform reconstruction on sipm data.
//

#ifndef RECONSTRUCTOR_H
#define RECONSTRUCTOR_H

namespace wheel 
{

class Reconstructor 
{

public:
  Reconstructor();
  ~Reconstructor();
  
  void  Reconstruct(unsigned& N0);
  void  SetData(const std::map<unsigned, unsigned>& data) { m_data = data; };
  void  Initialize(const Configuration& config);
  void  MakePlot(const unsigned& trigger);

  const double   ML()    { return m_mlLogLikelihood; }
  const float    X()     { return m_mlX; }
  const float    Y()     { return m_mlY; }
  const float    R()     { return m_mlRadius; }
  const float    Theta() { return m_mlTheta; }
  const unsigned N0()    { return m_mlN0; }
    
private:

  void     ConvertToPolar(float& r, float& thetaDeg, const float& x, const float& y);
   
  double                       m_mlLogLikelihood; //< Log likelihood for the MLE
  float                        m_mlN0;            //< MLE for N0
  float                        m_mlX;             //< MLE for x (cm)
  float                        m_mlY;             //< MLE for y (cm)
  float                        m_mlRadius;        //< MLE for r (cm)
  float                        m_mlTheta;         //< MLE for theta (deg)
  std::list<Voxel>             m_voxelList;          //< list of created voxels
  std::map<unsigned, unsigned> m_data;               //< measured counts (sipm, np.e.)
};
}

#endif
